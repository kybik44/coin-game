// Модуль для работы с балансом
const BalanceManager = {
    // Текущий баланс в памяти
    currentBalance: 0,
    userId: null,
    updateInterval: null,

    // Получение баланса с сервера
    async fetchBalance(userId) {
        try {
            const response = await fetch(`http://localhost:3000/api/balance/${userId}`);
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            const data = await response.json();
            this.currentBalance = data.balance;
            this.updateBalanceDisplay();
            return this.currentBalance;
        } catch (error) {
            console.error('Error fetching balance:', error);
            return this.currentBalance;
        }
    },

    // Обновление баланса
    async updateBalance(userId, amount, operation = 'add') {
        try {
            const response = await fetch('http://localhost:3000/api/balance/update', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    userId,
                    amount,
                    operation
                })
            });
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            const data = await response.json();
            this.currentBalance = data.balance;
            this.updateBalanceDisplay();
            return this.currentBalance;
        } catch (error) {
            console.error('Error updating balance:', error);
            return this.currentBalance;
        }
    },

    // Обновление отображения баланса на всех экранах
    updateBalanceDisplay() {
        const balanceElements = document.querySelectorAll('.balance-amount, #coin-count');
        balanceElements.forEach(element => {
            if (element) {
                element.textContent = this.formatBalance(this.currentBalance);
            }
        });
    },

    // Форматирование баланса
    formatBalance(balance) {
        return balance.toLocaleString();
    },

    // Инициализация баланса при загрузке страницы
    async init(userId) {
        if (this.updateInterval) {
            clearInterval(this.updateInterval);
        }
        
        this.userId = userId;
        await this.fetchBalance(userId);
        
        // Обновляем баланс каждые 30 секунд
        this.updateInterval = setInterval(() => this.fetchBalance(userId), 30000);
    },

    // Очистка при уходе со страницы
    cleanup() {
        if (this.updateInterval) {
            clearInterval(this.updateInterval);
            this.updateInterval = null;
        }
    }
};

// Очистка при уходе со страницы
window.addEventListener('unload', () => {
    BalanceManager.cleanup();
});

// Экспортируем модуль
window.BalanceManager = BalanceManager; 